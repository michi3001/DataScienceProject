Random Forest Accuracy: 0.7698
Classification Report for Random Forest:
              precision    recall  f1-score   support

         0.0       0.91      0.86      0.88       335
         1.0       0.76      0.67      0.71      1004
         2.0       0.66      0.48      0.55      2382
         3.0       0.74      0.82      0.78      2775
         4.0       0.82      0.92      0.87      4292

    accuracy                           0.77     10788
   macro avg       0.78      0.75      0.76     10788
weighted avg       0.76      0.77      0.76     10788

------------------------------------------------------------
KNN Accuracy: 0.5387
Classification Report for KNN:
              precision    recall  f1-score   support

         0.0       0.56      0.17      0.26       335
         1.0       0.36      0.22      0.28      1004
         2.0       0.32      0.32      0.32      2382
         3.0       0.52      0.55      0.53      2775
         4.0       0.68      0.75      0.72      4292

    accuracy                           0.54     10788
   macro avg       0.49      0.40      0.42     10788
weighted avg       0.53      0.54      0.53     10788

------------------------------------------------------------
SVM Accuracy: 0.4023
Classification Report for SVM:
              precision    recall  f1-score   support

         0.0       0.00      0.00      0.00       335
         1.0       0.00      0.00      0.00      1004
         2.0       0.00      0.00      0.00      2382
         3.0       0.39      0.08      0.13      2775
         4.0       0.40      0.96      0.57      4292

    accuracy                           0.40     10788
   macro avg       0.16      0.21      0.14     10788
weighted avg       0.26      0.40      0.26     10788

------------------------------------------------------------



Code:
# Verschiedene Modelle initialisieren
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier

models = {
    'Random Forest': RandomForestClassifier(),
    'KNN': KNeighborsClassifier(),
    'SVM': SVC(),
    'Logistic Regression': LogisticRegression(),
    'Gradient Boosting': GradientBoostingClassifier()
}

# Modelle trainieren und evaluieren
for model_name, model in models.items():
    # Modell trainieren
    model.fit(X_train, y_train)
    
    # Vorhersagen auf dem Testset
    y_pred = model.predict(X_test)
    
    # Genauigkeit auswerten
    accuracy = accuracy_score(y_test, y_pred)
    print(f"{model_name} Accuracy: {accuracy:.4f}")
    
    # Ausf√ºhrlicher Bericht
    print(f"Classification Report for {model_name}:")
    print(classification_report(y_test, y_pred))
    print("-" * 60)